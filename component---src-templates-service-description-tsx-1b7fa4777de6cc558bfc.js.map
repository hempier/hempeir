{"version":3,"sources":["webpack://gatsby-starter-default/./src/components/top-banner/top-banner.tsx","webpack://gatsby-starter-default/./src/components/service-aplication-areas/service-aplication-areas.tsx","webpack://gatsby-starter-default/./src/templates/service-description.tsx"],"names":["props","heading","description","image","TopBannerBackground","file","url","className","Boolean","childMarkdownRemark","rawMarkdownBody","AplicationAreasItem","documentation","documentationLinkText","src","alt","renderAst","htmlAst","href","target","items","advantagesTrustedItems","content","map","id","key","toString","Locale","pageContext","page","allLocales","serviceTopBanner","findByInternalName","ComponentInternalName","serviceAplicationAreas","plpFeedbackForm","currentLocale","node_locale"],"mappings":"uKA+BA,IAvBkB,SAACA,GAAU,IACnBC,EAAgCD,EAAhCC,QAASC,EAAuBF,EAAvBE,YAAaC,EAAUH,EAAVG,MAExBC,GAAsB,cAAH,oBAAG,CAAH,sGAICD,aAAA,EAAAA,EAAOE,KAAKC,MAAO,GAJpB,MAMzB,OACE,QAACF,EAAD,CAAqBG,UAAU,eAC7B,eAAKA,UAAU,qCACb,cAAIA,UAAU,4BAA4BN,GACzCO,QAAQN,aAAD,EAACA,EAAaO,uBACpB,aAAGF,UAAU,kCACVL,EAAYO,oBAAoBC,qB,6ICJvCC,EAAsB,SAAC,GAAD,IAAGR,EAAH,EAAGA,MAAOF,EAAV,EAAUA,QAASC,EAAnB,EAAmBA,YAAaU,EAAhC,EAAgCA,cAAeC,EAA/C,EAA+CA,sBAA/C,OAC1B,eAAKN,UAAU,mCACb,eAAKA,UAAU,4DACb,eAAKO,IAAKX,EAAME,KAAKC,IAAKS,IAAI,GAAGR,UAAU,sCAE7C,eAAKA,UAAU,yDACb,cAAIA,UAAU,qCAAqCN,IACnD,aAAGM,UAAU,0CACVS,OAAUd,EAAYO,oBAAoBQ,UAE5CT,QAAQI,KACP,aAAGM,KAAMN,EAAcP,KAAKC,IACxBa,OAAO,SACPZ,UAAU,qDAEXM,MAOX,EApCwB,SAAC,GAAc,IAAZO,EAAY,EAAZA,MACnBC,GAAyBD,aAAA,EAAAA,EAAOE,UAAW,GAEjD,OACE,mBAASf,UAAU,uCACjB,eAAKA,UAAU,wCACZc,EAAuBE,KAAI,SAACvB,EAAOwB,GAAR,OAC1B,QAACb,GAAD,QAAqBc,IAAKD,EAAGE,YAAgB1B,U,oBCGvD,G,QAFe2B,KAEf,SAAe,GAA2C,QAAxCC,YAAeC,EAAyB,EAAzBA,KAAMC,EAAmB,EAAnBA,WAI/BC,GAAmBC,OACvBH,EACAI,sBAEIC,GAAyBF,OAC7BH,EACAI,4BAEIE,GAAkBH,OACtBH,EACAI,kBAGF,OACE,QAAC,IAAD,CAASH,WAAYA,EAAYM,cAAeP,EAAKQ,cACnD,QAAC,IAAkBN,IACnB,QAAC,EAAD,CAAiBX,MAAOc,KACxB,QAAC,IAAiBC","file":"component---src-templates-service-description-tsx-1b7fa4777de6cc558bfc.js","sourcesContent":["import * as React from \"react\"\nimport styled from \"@emotion/styled\"\nimport { css } from \"@emotion/react\"\n\nimport \"./top-banner.scss\"\n\n\n\nconst TopBanner = (props) => {\n  const { heading, description, image } = props\n\n  const TopBannerBackground = styled.div`\n    background-repeat: no-repeat;\n    background-position: center;\n    background-size: cover;\n    background-image: url(${image?.file.url || []});\n  `\n  return (\n    <TopBannerBackground className=\"top-banner\">\n      <div className=\"top-banner__inner-wrap container\">\n        <h1 className=\"top-banner__title col-xs\">{heading}</h1>\n        {Boolean(description?.childMarkdownRemark) &&\n          <p className=\"top-banner__description col-xs\">\n            {description.childMarkdownRemark.rawMarkdownBody}\n          </p>\n        }\n      </div>\n    </TopBannerBackground>\n  )\n}\n\nexport default TopBanner\n","import * as React from \"react\"\nimport renderAst from \"../util-html-to-react\";\n\nimport \"./service-aplication-areas.scss\"\n\nconst AplicationAreas = ({ items }) => {\n  const advantagesTrustedItems = items?.content || []\n\n  return (\n    <section className=\"service-aplication-areas container\">\n      <div className=\"service-aplication-areas__inner-wrap\">\n        {advantagesTrustedItems.map((props, id) => (\n          <AplicationAreasItem key={id.toString()} {...props} />\n        ))}\n      </div>\n    </section>\n  )\n}\n\nconst AplicationAreasItem = ({ image, heading, description, documentation, documentationLinkText }) => (\n  <div className=\"service-aplication-areas__item\">\n    <div className=\"service-aplication-areas__image-wrap col-xs-12 col-sm-6\">\n      <img src={image.file.url} alt=\"\" className=\"service-aplication-areas__image\" />\n    </div>\n    <div className=\"service-aplication-areas__content col-xs-12 col-sm-6\">\n      <h4 className=\"service-aplication-areas__heading\">{heading}</h4>\n      <p className=\"service-aplication-areas__description\">\n        {renderAst(description.childMarkdownRemark.htmlAst)}\n      </p>\n      {Boolean(documentation) && (\n        <a href={documentation.file.url}\n            target=\"_blank\"\n            className=\"service-aplication-areas__tech-documentation link\"\n        >\n          {documentationLinkText}\n        </a>\n      )}\n    </div>\n  </div>\n)\n\nexport default AplicationAreas\n","import React from \"react\"\n\nimport Layout from \"../components/layout\"\nimport TopPageBanner from \"../components/top-banner/top-banner\"\nimport AplicationAreas from \"../components/service-aplication-areas/service-aplication-areas\";\nimport FeedbackForm from \"../components/feedback-form/feedback-form\"\n\nimport {\n  findByInternalName,\n  ComponentInternalName,\n} from \"../components/component-internal-name\"\nimport { filterPageLocale, Locale } from \"../components/locale-provider\"\n\nconst locale = Locale.Ua\n\nexport default ({ pageContext: { page, allLocales } }) => {\n  // const localizedPage = filterPageLocale(page, locale)\n  // const localizedPage = page\n\n  const serviceTopBanner = findByInternalName(\n    page,\n    ComponentInternalName.ServiceTopBanner\n  )\n  const serviceAplicationAreas = findByInternalName(\n    page,\n    ComponentInternalName.ServiceAplicationAreas\n  )\n  const plpFeedbackForm = findByInternalName(\n    page,\n    ComponentInternalName.FeedbackForm\n  )\n\n  return (\n    <Layout  allLocales={allLocales} currentLocale={page.node_locale}>\n      <TopPageBanner {...serviceTopBanner} />\n      <AplicationAreas items={serviceAplicationAreas}/>\n      <FeedbackForm {...plpFeedbackForm} />\n    </Layout>\n  )\n}\n"],"sourceRoot":""}