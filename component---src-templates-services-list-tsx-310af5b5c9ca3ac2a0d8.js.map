{"version":3,"sources":["webpack://gatsby-starter-default/./src/components/feedback-form/feedback-form.tsx","webpack://gatsby-starter-default/./src/components/top-banner/top-banner.tsx","webpack://gatsby-starter-default/./src/components/services-list/services-list.tsx","webpack://gatsby-starter-default/./src/templates/services-list.tsx"],"names":["props","image","title","subtitle","nameFieldLable","phoneFieldLable","emailFieldLable","commentsFieldLable","ctaText","FeedbackFromBackground","file","url","React","submitting","status","setServerState","handleServerResponse","ok","msg","form","reset","className","onSubmit","e","preventDefault","target","axios","method","data","FormData","then","r","catch","response","error","id","htmlFor","required","type","name","heading","description","TopBannerBackground","Boolean","childMarkdownRemark","rawMarkdownBody","ServicesListItem","shortDescription","ctaLink","currentLocale","listingPage","Link","to","serviceSlug","src","alt","component","contentPresent","content","map","key","toString","Locale","pageContext","page","allLocales","projectsListTopBanner","findByInternalName","ComponentInternalName","servicesList","plpFeedbackForm","node_locale","slug"],"mappings":"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","file":"component---src-templates-services-list-tsx-310af5b5c9ca3ac2a0d8.js","sourcesContent":["import * as React from \"react\"\nimport styled from \"@emotion/styled\"\nimport axios from \"axios\";\n\nimport \"./feedback-form.scss\"\n\nconst FeedbackForm = props => {\n  const {\n    image,\n    title,\n    subtitle,\n    nameFieldLable,\n    phoneFieldLable,\n    emailFieldLable,\n    commentsFieldLable,\n    ctaText,\n  } = props\n\n  const FeedbackFromBackground = styled.div`\n    background-repeat: no-repeat;\n    background-position: center;\n    background-size: cover;\n    background-image: url(${image.file.url});\n  `\n\n  const [serverState, setServerState] = React.useState({\n    submitting: false,\n    status: null\n  });\n\n  const handleServerResponse = (ok, msg, form) => {\n    setServerState({\n      submitting: false,\n      status: { ok, msg }\n    });\n    if (ok) {\n      form.reset();\n    }\n  };\n  \n  const handleOnSubmit = e => {\n    e.preventDefault();\n    const form = e.target;\n    setServerState({ submitting: true });\n    axios({\n      method: \"post\",\n      url: \"https://getform.io/f/fd79ffaa-e0d5-42b2-b125-41458a780f9e\",\n      data: new FormData(form)\n    })\n      .then(r => {\n        handleServerResponse(true, \"Thanks!\", form);\n      })\n      .catch(r => {\n        handleServerResponse(false, r.response.data.error, form);\n      });\n  };\n\n  return (\n    <FeedbackFromBackground className=\"feedback-form col-xs\">\n      <div className=\"container\">\n        <div className=\"feedback-form__inner-wrap col-xs-12\">\n          <h2 className=\"feedback-form__title\">{title}</h2>\n          <p className=\"feedback-form__subtitle\">{subtitle}</p>\n          <form onSubmit={handleOnSubmit} className=\"feedback-form__form form-body\" id=\"feedback-form\">\n            <div className=\"feedback-form__fieldset form-fieldset\">\n              <label htmlFor=\"name\" className=\"feedback-form__label form-label\">\n                {nameFieldLable}\n              </label>\n              <input\n                required\n                type=\"text\"\n                id=\"name\"\n                name=\"name\"\n                className=\"feedback-form__input form-input\"\n              />\n            </div>\n            <div className=\"feedback-form__fieldset form-fieldset\">\n              <label\n                htmlFor=\"phone\"\n                className=\"feedback-form__label form-label\"\n              >\n                {phoneFieldLable}\n              </label>\n              <input\n                required\n                type=\"phone\"\n                id=\"phone\"\n                name=\"phone\"\n                className=\"feedback-form__input form-input\"\n              />\n            </div>\n            <div className=\"feedback-form__fieldset form-fieldset\">\n              <label\n                htmlFor=\"email\"\n                className=\"feedback-form__label form-label\"\n              >\n                {emailFieldLable}\n              </label>\n              <input\n                required\n                type=\"email\"\n                id=\"email\"\n                name=\"email\"\n                className=\"feedback-form__input form-input\"\n              />\n            </div>\n            <div className=\"feedback-form__fieldset form-fieldset\">\n              <label\n                htmlFor=\"comment\"\n                className=\"feedback-form__label form-label\"\n              >\n                {commentsFieldLable}\n              </label>\n              <input\n                type=\"text\"\n                id=\"comment\"\n                name=\"comment\"\n                className=\"feedback-form__input form-input\"\n              />\n            </div>\n            <button type=\"submit\" className=\"feedback-form__submit cta-link\">\n              {ctaText}\n            </button>\n          </form>\n        </div>\n      </div>\n    </FeedbackFromBackground>\n  )\n}\n\nexport default FeedbackForm\n","import * as React from \"react\"\nimport styled from \"@emotion/styled\"\nimport { css } from \"@emotion/react\"\n\nimport \"./top-banner.scss\"\n\n\n\nconst TopBanner = (props) => {\n  const { heading, description, image } = props\n\n  const TopBannerBackground = styled.div`\n    background-repeat: no-repeat;\n    background-position: center;\n    background-size: cover;\n    background-image: url(${image?.file.url || []});\n  `\n  return (\n    <TopBannerBackground className=\"top-banner\">\n      <div className=\"top-banner__inner-wrap container\">\n        <h1 className=\"top-banner__title col-xs\">{heading}</h1>\n        {Boolean(description?.childMarkdownRemark) &&\n          <p className=\"top-banner__description col-xs\">\n            {description.childMarkdownRemark.rawMarkdownBody}\n          </p>\n        }\n      </div>\n    </TopBannerBackground>\n  )\n}\n\nexport default TopBanner\n","import * as React from \"react\"\nimport { Link } from \"gatsby\"\nimport \"./services-list.scss\"\n\n\nconst ServicesList = ({ component, currentLocale, listingPage }) => {\n  const contentPresent = Boolean(component?.content)\n  const content = component.content\n\n  if (!contentPresent) {\n    return <div>no content</div>\n  }\n\n  return (\n    <section className=\"services-list container\">\n      <div className=\"services-list__inner-wrap\">\n          {content.map((props, id) => (\n            <ServicesListItem key={id.toString()} {...props} currentLocale={currentLocale} listingPage={listingPage}  />\n          ))}\n      </div>\n    </section>\n  )\n}\n\nconst ServicesListItem = ({ image, title, shortDescription, ctaText, ctaLink, currentLocale, listingPage }) => (\n  <Link\n    to={ctaLink\n    ? `/${currentLocale}/${listingPage}/${ctaLink.serviceSlug}`\n    : null}\n    className=\"services-list__item col-xs-12 col-xm-6\">\n      <div className=\"services-list__image-wrap\">\n        <img src={image.file.url} alt=\"\" className=\"services-list__image\"/>\n      </div>\n      <h4 className=\"services-list__heading\">{title}</h4>\n      <p className=\"services-list__description\">{shortDescription}</p>\n      <span className=\"learn-more\">{ctaText}</span>\n  </Link>\n)\n\nexport default ServicesList\n","import React from \"react\"\n\nimport Layout from \"../components/layout\"\nimport TopPageBanner from \"../components/top-banner/top-banner\"\nimport ServicesList from \"../components/services-list/services-list\"\nimport FeedbackForm from \"../components/feedback-form/feedback-form\"\n\nimport {\n  findByInternalName,\n  ComponentInternalName,\n} from \"../components/component-internal-name\"\nimport { filterPageLocale, Locale } from \"../components/locale-provider\"\n\nconst locale = Locale.Ua\n\nexport default ({ pageContext: { page, allLocales } }) => {\n  // const localizedPage = filterPageLocale(page, locale)\n  // const localizedPage = page\n\n  const projectsListTopBanner = findByInternalName(\n    page,\n    ComponentInternalName.ServicesListTopBanner\n  )\n  const servicesList = findByInternalName(\n    page,\n    ComponentInternalName.ServicesList\n  )\n  const plpFeedbackForm = findByInternalName(\n    page,\n    ComponentInternalName.FeedbackForm\n  )\n\n  return (\n    <Layout  allLocales={allLocales} currentLocale={page.node_locale}>\n      <TopPageBanner {...projectsListTopBanner} />\n      <ServicesList component={servicesList} currentLocale={page.node_locale} listingPage={page.slug} />\n      <FeedbackForm {...plpFeedbackForm} />\n    </Layout>\n  )\n}\n"],"sourceRoot":""}